dir()
setwd("~/Documents/NCCU/Course/DSP/project/")
dir()
ls
dir
dir()
ls()
print summary(data)
print(summary(data))
data
data
data
summary(data)
data <- read.table("~/Documents/NCCU/Course/DSP/project/data/ticdata2000.txt")
setwd(dir = "~/Documents/NCCU/Course/DSP/project/")
data <- read.table("~/Documents/NCCU/Course/DSP/project/data/ticdata2000.txt")
data <- read.table("~/Documents/NCCU/Course/DSP/project/data/ticdata2000.txt")
print(summary(data))
dim(data)
summary(data)
dim(data)
summary(data)
class(data)
data[, 34]
data[, 42]
data[, 42]
table(customer_type)
table(data[, 1])
table(customer.type)
customer.type
table(data[, 1])
prop.table(table(data[, 1]))
barplot(table(data[, 1]))
barplot(prop.table(table(data[, 1])))
barplot(prop.table(table(data[, 1])))
barplot(prop.table(table(data[, 2])))
barplot(table(data[, 2]))
prop.table(table(data[, 2]))
table(data[, 2])
barplot(prop.table(table(data[, 3])))
barplot(table(data[, 3]))
prop.table(table(data[, 3]))
table(data[, 3])
barplot(prop.table(table(data[, 4])))
table(data[, 4])
barplot(prop.table(table(data[, 5])))
#summary(data)
table(data[, 1,5])
table(data[, c(1,5)])
prop.table(table(data[, c(1,5)]))
barplot(prop.table(table(data[, c(1,5)])))
table(data[, c(1,5)])
library(ISLR)
library("ISLR")
table(data[, 86])
table(caravan.purchase)
caravan.purchase = data[, 86]
table(caravan.purchase)
a<-table(caravan.purchase[1])
ylab = " Number of customers")
ylab = " Number of customers ")
ylab = " Number of customers ",)
ylab = " Number of customers " )
border ="dark blue",
border="dark blue",
xlab =" customer subtype 1 ",
ylab=" Number of customers " )
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(caravan.purchase == 1)
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(data$MOSTYPE[caravan.purchase == 1])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(data$MOSTYPE[data$Purchase=="Yes"])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
colnames(data)
a<-table(data$V1[data$V86=="Yes"])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(data$V1[data$V86==1])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(data$V1[data$V86==0])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
a<-table(data$V1[data$V86==1])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
barplot(prop.table(table(data[, c(1,5)])))
a<-table(data$V1[data$V2==2])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
library(shiny)
runApp('~/Documents/NCCU/Course/DSP/Homework/HW3')
data <- read.table("data/ticdata2000.txt")
table(data[, 1])
label <- train.data$V86
train.data <- read.table("data/ticdata2000.txt")
label <- train.data$V86
label
table(label)
table(data[, 1])
caravan.purchase = data[, 86]
a<-table(data$V1[data$V2==2])
barplot(a,border="dark blue",main="BAR PLOT FOR CUSTOMER SUBTYPE 1 ",xlab=" customer subtype 1 ",ylab=" Number of customers " )
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 2)
libs = c("foreign", "plyr", "dplyr", "ggplot2", "class")
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 2)
sapply(libs, require, character.only = TRUE)
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 2)
test.data <- read.table("data/ticeval2000.txt")
gt <- read.table("data/tictgts2000.txt")
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 2)
data_pred
length(data_pred)
resultFrame <- data.frame(target = data_pred, predict = gt)
resultFrame
data$id <- sample(1:k, nrow(train.data), replace=TRUE)
k <- 4
data$id <- sample(1:k, nrow(train.data), replace=TRUE)
data
data$id
k <- 3
data$id <- sample(1:k, nrow(train.data), replace=TRUE)
data$id
dim(train.data)
dim(train.data)
train.data$id <- sample(1:k, nrow(train.data), replace=TRUE)
dim(train.data)
colnames(train.data)
resultFrame <- data.frame(target = data_pred, predict = gt)
table(resultFrame$target, resultFrame$predict)
resultFrame <- data.frame(target = data_pred, predict = gt)
resultFrame
table(resultFrame$target, resultFrame$predict)
resultFrame <- data.frame(target = data_pred, predict = gt)
table(resultFrame$target, resultFrame$predict)
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 2)
resultFrame <- data.frame(target = data_pred, predict = gt)
table(resultFrame$target, resultFrame$predict)
resultFrame$predict
dim(gt)
resultFrame$target
dim(resultFrame$target)
length(resultFrame$target)
dim(data_pred)
length(data_pred)
resultFrame <- data.frame(target = data_pred, predict = gt[, 1])
length(resultFrame$target)
table(resultFrame$target, resultFrame$predict)
resultFrame[1:5,]
resultFrame[1:50,]
resultFrame$predict[1:50,]
resultFrame$predict[1:50]
resultFrame$target[1:50]
resultFrame$predict[1:50]
table(resultFrame$target, resultFrame$predict)
levels(resultFrame$predict[1:50])
levels(resultFrame$predict)
levels(resultFrame$target)
class(data_pred)
levels(data_pred)
data_pred
resultFrame <- data.frame(target = factor(data_pred), predict = gt[, 1])
levels(resultFrame$target)
table(resultFrame$target, resultFrame$predict)
accuracy <- function(t, l) {
TN <- 0
N <- 0
for(i in l) {
for(j in l) {
if(i == j) TN <- TN + t[i, j]
N <- N + t[i, j]
}
}
return(TN/N)
}
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(train.data[, 86]))
a
print(a)
t <- table(resultFrame$target, resultFrame$predict)
t
levels([, 86])
levels(train.data[, 86])
class(train.data[, 86])
length(train.data[, 86])
levels(train.data[, 86])
print(train.data[, 86])
length(train.data[, 86])
a <- accuracy(t, factor(train.data[, 86]))
factor(train.data[, 86])
train.data <- read.table("data/ticdata2000.txt")
train.data <- read.table("data/ticdata2000.txt")
t <- table(resultFrame$target, resultFrame$predict)
t
a <- accuracy(t, levels(train.data[, 86]))
a
levels(train.data[, 86])
levels(train.data[, 86])
factor(train.data[, 86])
factor(levels(train.data[, 86]))
a <- accuracy(t, levels(train.data[, 86]))
levels(train.data[, 86])
class(train.data[, 86])
length(train.data[, 86])
a <- accuracy(t, levels(train$V86))
a <- accuracy(t, levels(train.data$V86))
a
levels(train.data[, 86])
levels(c("1","2",3))
levels(c(1,2,3))
factor(c(1,2,3))
a <- accuracy(t, levels(factor(train.data[, 86]))
a
a <- accuracy(t, levels(factor(train.data[, 86])))
a
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 3)
resultFrame <- data.frame(target = data_pred, predict = gt[, 1])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(factor(train.data[, 86])))
a
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 4)
resultFrame <- data.frame(target = data_pred, predict = gt[, 1])
levels(resultFrame$target)
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(factor(train.data[, 86])))
a
mena(c(1,2,3,4,5))
mean(c(1,2,3,4,5))
min(c(1,2,3,4,5))
which(min(c(1,2,3,4,5)))
c <- c(1,2,3,4,5)
which(c==min(c))
which(c==max(c))
k <- 3
# Spliting data into k-fold by marking each data to several groups
train.data$id <- sample(1:k, nrow(train.data), replace=TRUE)
kfold.err <- 0
for(kp in 1:6) {
kp.err <- 0
for(i in 1:k) {
training <- subset(train.data, id %in% l[-i])
validation <- subset(train.data, id %in% c(i))
data_pred <- knn(train = training[, 1:85], test = validation[, 1:85], cl = training[, 86], k = kp)
resultFrame <- data.frame(target = factor(data_pred), predict = validation[, 2])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(validation[, 86]))
kp.err <- c(kp.err, a)
}
avg.kp.err <- mean(kp.err)
kfold.err <- c(kfold.err, avg.kp.err)
}
# Processing the command arguments
args <- commandArgs(trailingOnly=TRUE)
i <- 1
k <- 2
l <- list()
arg <- ""
out <- ""
while (i <= length(args)) {
if(grepl('-', args[i])) {
arg <- tolower(sub("-", "", args[i]))
i <- i+1
}
if (arg == 'fold') {
k <- args[i]
l <- 1:k
} else if (arg == 'out') {
out <- args[i]
out <- gsub('^.+\\/(.+)$', '\\1', out)
out <- paste("../result", out,sep="/")
} else {
stop("USAGE: RScript hw4.R -fold n -out performance.csv", call.=FALSE)
}
i <- i+1
}
# Function: calculate the accuracy
# Input: table, type
# Output: accuracy
accuracy <- function(t, l) {
TN <- 0
N <- 0
for(i in l) {
for(j in l) {
if(i == j) TN <- TN + t[i, j]
N <- N + t[i, j]
}
}
return(TN/N)
}
# Spliting data into k-fold by marking each data to several groups
train.data$id <- sample(1:k, nrow(train.data), replace=TRUE)
kfold.err <- 0
for(kp in 1:6) {
kp.err <- 0
for(i in 1:k) {
training <- subset(train.data, id %in% l[-i])
validation <- subset(train.data, id %in% c(i))
data_pred <- knn(train = training[, 1:85], test = validation[, 1:85], cl = training[, 86], k = kp)
resultFrame <- data.frame(target = factor(data_pred), predict = validation[, 2])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(validation[, 86]))
kp.err <- c(kp.err, a)
}
avg.kp.err <- mean(kp.err)
kfold.err <- c(kfold.err, avg.kp.err)
}
for(kp in 2:6) {
kp.err <- 0
for(i in 1:k) {
training <- subset(train.data, id %in% l[-i])
validation <- subset(train.data, id %in% c(i))
data_pred <- knn(train = training[, 1:85], test = validation[, 1:85], cl = training[, 86], k = kp)
resultFrame <- data.frame(target = factor(data_pred), predict = validation[, 2])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(validation[, 86]))
kp.err <- c(kp.err, a)
}
avg.kp.err <- mean(kp.err)
kfold.err <- c(kfold.err, avg.kp.err)
}
for(kp in 1:6) {
kp.err <- 0
for(i in 1:k) {
training <- subset(train.data, id %in% l[-i])
validation <- subset(train.data, id %in% c(i))
data_pred <- knn(train = training[, 1:85], test = validation[, 1:85], cl = training[, 86], k = kp)
resultFrame <- data.frame(target = factor(data_pred), predict = validation[, 2])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(validation[, 86]))
kp.err <- c(kp.err, a)
}
avg.kp.err <- mean(kp.err)
kfold.err <- c(kfold.err, avg.kp.err)
}
kfold <- args[i]
l <- 1:kfold
kfold <- 2
for(i in 1:kfold) {
}
kp <- which(kfold.err == min(kfold.err))
kp
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 3)
print("test")
resultFrame <- data.frame(target = data_pred, predict = gt[, 1])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(factor(train.data[, 86])))
a
l <- list("a"=1)
l
l <- list(l,2)
l
l <- list(l,"a"=2)
l
c <- c()
c
c <- c("a")
c
c <- c(c, "b")
c
c <- c(1,2,3,4,5)
c
which(c == min(c))
data_pred <- knn(train = train.data[, 1:85], test = test.data[, 1:85], cl = train.data[, 86], k = 6)
print("test")
resultFrame <- data.frame(target = data_pred, predict = gt[, 1])
t <- table(resultFrame$target, resultFrame$predict)
a <- accuracy(t, levels(factor(train.data[, 86])))
a
runApp()
runApp('~/Documents/NCCU/Course/DSP/Homework/HW3')
runApp()
